// Coordinate.h
#pragma once

class Coordinate {
public:
    Coordinate(int x, int y);
    int getX() const;
    int getY() const;

private:
    int x, y;
};

// Coordinate.cpp
#include "Coordinate.h"

Coordinate::Coordinate(int x, int y) : x(x), y(y) {}

int Coordinate::getX() const {
    return x;
}

int Coordinate::getY() const {
    return y;
}

// GameObject.h
#pragma once

class GameObject {
public:
    virtual void draw() = 0;
    virtual void update() = 0;
};

// Snake.h
#pragma once
#include "Coordinate.h"
#include "GameObject.h"

class Snake : public GameObject {
public:
    Snake(int startX, int startY);
    void draw() override;
    void update() override;
    void move();
    bool isCollision(int targetX, int targetY);
    void addTailSegment();

private:
    int x, y;
    std::vector<Coordinate> tail;
};

// Snake.cpp
#include "Snake.h"
#include <iostream> // for testing

Snake::Snake(int startX, int startY) : x(startX), y(startY) {}

void Snake::draw() {
    std::cout << "Snake drawing at (" << x << ", " << y << ")" << std::endl;
    // Add drawing logic here
}

void Snake::update() {
    std::cout << "Snake updating at (" << x << ", " << y << ")" << std::endl;
    // Add update logic here
}

void Snake::move() {
    // Implement snake's movement logic
}

bool Snake::isCollision(int targetX, int targetY) {
    // Check for collisions
    return x == targetX && y == targetY;
}

void Snake::addTailSegment() {
    // Add a new tail segment
}

// Fruit.h
#pragma once
#include "Coordinate.h"
#include "GameObject.h"

class Fruit : public GameObject {
public:
    Fruit(int width, int height);
    void draw() override;
    void update() override;
    int getX() const;
    int getY() const;
    void respawn();

private:
    int x, y;
    int width, height;
};

// Fruit.cpp
#include "Fruit.h"
#include <iostream> // for testing

Fruit::Fruit(int width, int height) : width(width), height(height) {
    respawn();
}

void Fruit::draw() {
    std::cout << "Fruit drawing at (" << x << ", " << y << ")" << std::endl;
    // Add drawing logic here
}

void Fruit::update() {
    std::cout << "Fruit updating at (" << x << ", " << y << ")" << std::endl;
    // Add update logic here
}

int Fruit::getX() const {
    return x;
}

int Fruit::getY() const {
    return y;
}

void Fruit::respawn() {
    x = rand() % width;
    y = rand() % height;
}

// Game.h
#pragma once
#include "Snake.h"
#include "Fruit.h"
#include "GameObject.h"

class Game : public GameObject {
public:
    Game(int width, int height);
    void run() override;

private:
    bool gameOver;
    int width, height;
    int score;
    int x, y;
    Snake snake;
    Fruit fruit;
    enum class Direction { STOP, LEFT, RIGHT, UP, DOWN };
    Direction dir;

    void setup();
    void draw() override;
    void input();
    void logic();
    void pause(int milliseconds);
};

// Game.cpp
#include "Game.h"
#include <iostream> // for testing

Game::Game(int width, int height) : width(width), height(height), snake(10, 5), fruit(width, height) {
    setup();
}

void Game::run() {
    while (!gameOver) {
        draw();
        input();
        logic();
        pause(100); // Adjust the speed of the game
    }
}

void Game::setup() {
    gameOver = false;
    dir = Direction::STOP;
    x = width / 2;
    y = height / 2;
    score = 0;
}

void Game::draw() {
    system("cls");
    snake.draw();
    fruit.draw();
    std::cout << "Score:" << score << std::endl;
}

void Game::input() {
    if (_kbhit()) {
        switch (_getch()) {
        case 'a':
            dir = Direction::LEFT;
            break;
        case 'd':
            dir = Direction::RIGHT;
            break;
        case 'w':
            dir = Direction::UP;
            break;
        case 's':
            dir = Direction::DOWN;
            break;
        case 'x':
            gameOver = true;
            break;
        }
    }
}

void Game::logic() {
    snake.update();

    // Additional game logic, collision checks, etc.

    if (snake.isCollision(fruit.getX(), fruit.getY())) {
        score += 10;
        fruit.respawn();
    }
}

void Game::pause(int milliseconds) {
    clock_t goal = milliseconds + clock();
    while (goal > clock());
}

// main.cpp
#include "Game.h"
#include <ctime>

int main() {
    srand(static_cast<unsigned>(time(0))); // Seed for random number generation
    Game game(20, 10);
    game.run();
    return 0;
}

//This version includes separate header and source files for each class and follows better object-oriented design practices. 
